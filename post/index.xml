<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Namiking.net</title>
    <link>http://blog.namiking.net/post/</link>
    <description>Recent content in Posts on Namiking.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp-ja</language>
    <lastBuildDate>Fri, 11 Sep 2015 08:30:23 +0900</lastBuildDate>
    <atom:link href="http://blog.namiking.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>webpack-dev-serverで継続的なクライアントサイドテスト</title>
      <link>http://blog.namiking.net/post/2015/09/test-webpack-browser/</link>
      <pubDate>Fri, 11 Sep 2015 08:30:23 +0900</pubDate>
      
      <guid>http://blog.namiking.net/post/2015/09/test-webpack-browser/</guid>
      <description>

&lt;p&gt;webpackの&lt;a href=&#34;http://webpack.github.io/docs/testing.html&#34;&gt;Testing&lt;/a&gt;を眺めてたら、
ブラウザ上でアプリを動作させながらMochaのSpecを走らせて、
クライアントサイドのテストをする、
みたいなことが手軽に出来そうだったので、やってみた。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webpack-dev-server&lt;/strong&gt;を利用すれば、
ソースやテストを修正直後に自動リロードされるので、
継続的テストみたいな手法もとりやすい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/test-webpack-browser/index.jpg&#34; alt=&#34;ScreenShot&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;動作サンプル:83d5efb00d572fc7f727b6dff95ecdf6&#34;&gt;動作サンプル&lt;/h3&gt;

&lt;p&gt;ひと通り動くサンプルを作ったので、以下のGitHubに上げておきます。
nodeやnpmがインストールされていれば、動作すると思われます。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Greetingボタンを押したら、その下に挨拶が追加される&amp;rdquo;&lt;br /&gt;
みたいな動作のサンプルアプリとそのSpecをjQueryでシンプルに組んであります。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GitHub: sample-webpack-test&lt;br /&gt;
&lt;a href=&#34;https://github.com/namikingsoft/sample-webpack-test&#34;&gt;https://github.com/namikingsoft/sample-webpack-test&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;試しにブラウザで動かしてみる:83d5efb00d572fc7f727b6dff95ecdf6&#34;&gt;試しにブラウザで動かしてみる&lt;/h3&gt;

&lt;p&gt;GitHub上の&lt;a href=&#34;https://github.com/namikingsoft/sample-webpack-test&#34;&gt;動作サンプル&lt;/a&gt;をcloneして、
webpack-dev-serverを起動したら、
お使いのブラウザから以下のURLにアクセスすることで動作を確認できる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:8080/webpack-dev-server/&#34;&gt;http://localhost:8080/webpack-dev-server/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;コマンド例:83d5efb00d572fc7f727b6dff95ecdf6&#34;&gt;コマンド例&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/namikingsoft/sample-webpack-test
cd sample-webpack-test
npm install &amp;amp;&amp;amp; npm start
open http://localhost:8080/webpack-dev-server/
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;動作画面の例:83d5efb00d572fc7f727b6dff95ecdf6&#34;&gt;動作画面の例&lt;/h4&gt;

&lt;p&gt;フロントエンドアプリとMochaのSpecを同時に動かしている図。
Seleniumみたいにギュンギュン動いて楽しい。
Mochaのテスト中にに割り込んでワザとテストを失敗させたりできる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/test-webpack-browser/animation.gif&#34; alt=&#34;Animation&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Specは走らなくていいから、
アプリの動作確認だけしたいときは以下のURL&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:83d5efb00d572fc7f727b6dff95ecdf6:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:83d5efb00d572fc7f727b6dff95ecdf6:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;で可能。
&lt;a href=&#34;http://localhost:8081/webpack-dev-server/app&#34;&gt;http://localhost:8081/webpack-dev-server/app&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ざっくり解説:83d5efb00d572fc7f727b6dff95ecdf6&#34;&gt;ざっくり解説&lt;/h3&gt;

&lt;h4 id=&#34;ファイル構成:83d5efb00d572fc7f727b6dff95ecdf6&#34;&gt;ファイル構成&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;sample-webpack-test
├── build
│   ├── app.js // webpackが吐き出したアプリ本体のバンドルJS。
│   ├── index.html // アプリとSpecを動作させるHTML
│   └── spec.js  // webpackが吐き出したSpecのバンドルJS。
├── spec // このディレクトリ以下に置いた*Spec.jsが実行される
│   └── mainSpec.js 
├── src
│   └── main.js // アプリ本体のソース
└── webpack.config.js // webpackの設定ファイル
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;build&lt;/code&gt;ディレクトリ内の&lt;code&gt;app.js&lt;/code&gt;と&lt;code&gt;spec.js&lt;/code&gt;は、
webpack-dev-server内の動作であれば、
メモリ内のものが呼び出されるようなので、特に設置する必要はなさそう。&lt;/p&gt;

&lt;h4 id=&#34;複数のspecファイルに対応する:83d5efb00d572fc7f727b6dff95ecdf6&#34;&gt;複数のSpecファイルに対応する&lt;/h4&gt;

&lt;p&gt;npmのglobモジュールを利用して、
複数のSpecファイルをエントリーポイントに含めることができる。
また、requireでglobを書きたい場合は、&lt;a href=&#34;https://github.com/seanchas116/glob-loader&#34;&gt;glob-loader&lt;/a&gt;を使えば、同じようなことができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// webpack.config.jsのmodule.exports内

entry: {
  app: &amp;quot;./src/main.js&amp;quot;,
  spec: glob.sync(&amp;quot;./spec/**/*Spec.js&amp;quot;),
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;修正後に自動的にテストが走るようにする:83d5efb00d572fc7f727b6dff95ecdf6&#34;&gt;修正後に自動的にテストが走るようにする&lt;/h4&gt;

&lt;p&gt;webpack-dev-serverには、ファイル修正を検知して再読み込みをしてくれる、
hotモードという機能が付いているので、webpack.config.jsでそれをを有効にする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// webpack.config.jsのmodule.exports内

devServer: {
  // Document Root
  contentBase: &amp;quot;./build&amp;quot;,
  // 動作ポート指定
  port: 8080,
  // hotモード有効化
  hot: true,
  // これがないと、ブラウザで
  inline: true,
},
plugins: [
  // hotモードに必要なプラグイン
  new webpack.HotModuleReplacementPlugin(),
],
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;specファイルをブラウザで動作するように変換する:83d5efb00d572fc7f727b6dff95ecdf6&#34;&gt;Specファイルをブラウザで動作するように変換する&lt;/h4&gt;

&lt;p&gt;webpackの&lt;a href=&#34;http://webpack.github.io/docs/testing.html&#34;&gt;Testing&lt;/a&gt;のページにもあるが、
mocha-loaderを噛ますことで、ブラウザでMochaが利用可能になるJSが吐き出せるようになる。&lt;/p&gt;

&lt;p&gt;SpecファイルをES6で書きたければ、
babel-loaderを挟むと、一般ブラウザ用のJSに変換できる。
CoffeeScript+Chaiとかで書いても気持ちよさそう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// webpack.config.jsのmodule.exports内

module: {
  loaders: [
    // App用
    {
      test: /\.js$/,
      loaders: [&#39;babel&#39;],
      exclude: /(node_modules|bower_components)/,
    },
    // Spec用
    {
      test: /Spec\.js$/,
      loaders: [&#39;mocha&#39;, &#39;babel&#39;],
      exclude: /(node_modules|bower_components)/,
    },
  ],
},
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;appとspecを同時に走らせるhtmlを用意:83d5efb00d572fc7f727b6dff95ecdf6&#34;&gt;AppとSpecを同時に走らせるHTMLを用意&lt;/h4&gt;

&lt;p&gt;アプリの動作画面にSpec結果のレイアウトを入れ込む。&lt;br /&gt;
&lt;code&gt;app.js&lt;/code&gt;で必要なUIを書き出すなどの初期処理を行ってから、&lt;code&gt;spec.js&lt;/code&gt;を走らせている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- build/index.html --&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;App&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
      /* Spec実行結果を表示するレイアウトCSS */
      .layout-spec {
        position: fixed;
        overflow: scroll;
        top: 0; bottom: 0; right: 0;
        width: 45%;
        background-color: #eee;
      }
      .layout-spec pre {
        background-color: #fff;
      }
    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;!-- App実行 --&amp;gt;
    &amp;lt;script src=&amp;quot;app.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;div class=&amp;quot;layout-spec&amp;quot;&amp;gt;
      &amp;lt;!-- Spec実行 --&amp;gt;
      &amp;lt;script src=&amp;quot;spec.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;あとがき:83d5efb00d572fc7f727b6dff95ecdf6&#34;&gt;あとがき&lt;/h3&gt;

&lt;p&gt;ChromeとかFirefoxなどの複数のブラウザ上で手軽にフロント動作仕様を自動チェックしたい、
みたいなときの方法論の一つとして紹介してみた。&lt;/p&gt;

&lt;p&gt;ただ、CLI動作とかCIと連携する場合は、
Kermaのようなテストランナーを使ったほうが良いかも。
webpackはKermaとも簡単に連動できるようなので、
その辺も後々まとめておきたい。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:83d5efb00d572fc7f727b6dff95ecdf6:1&#34;&gt;URLの&lt;code&gt;app&lt;/code&gt;は&lt;code&gt;webpack.config.js&lt;/code&gt;のentry項目で設定した連想配列のキー。HTMLはwebpack-dev-serverがメモリ内で自動生成してくれる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:83d5efb00d572fc7f727b6dff95ecdf6:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>オープンソースのかんばん式管理ツールを３つほど試してみた</title>
      <link>http://blog.namiking.net/post/2015/09/kanban-board/</link>
      <pubDate>Fri, 04 Sep 2015 08:30:23 +0900</pubDate>
      
      <guid>http://blog.namiking.net/post/2015/09/kanban-board/</guid>
      <description>

&lt;p&gt;コンプライアンス&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c734c5cb2dac2213cc062a5b86e79214:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c734c5cb2dac2213cc062a5b86e79214:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;を重視する現場で、
アジャイルなプロジェクト管理ツールが現場で必要になったときに、
外部Webサービスな&lt;code&gt;Trello&lt;/code&gt;や&lt;code&gt;Pivotal Tracker&lt;/code&gt;を導入しづらいことがある。&lt;/p&gt;

&lt;p&gt;そこで、OSSのかんばん式管理ツールをいくつか探して、&lt;br /&gt;
色々試して感じたことをまとめておきます。&lt;/p&gt;

&lt;h3 id=&#34;今回試した-かんばん式-プロジェクト管理ツール:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;今回試した &amp;lsquo;かんばん式&amp;rsquo; プロジェクト管理ツール&lt;/h3&gt;

&lt;p&gt;以下に挙げる以外にも、OSSのかんばん式管理ツールは数多く存在するが、
機能面・とっつきやすさ・導入の容易さなどに基いて、３つだけピックアップさせていただいた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TAIGA&lt;br /&gt;
&lt;a href=&#34;https://taiga.io/&#34;&gt;https://taiga.io/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Wekan (旧LibreBoard)&lt;br /&gt;
&lt;a href=&#34;http://newui.libreboard.com&#34;&gt;http://newui.libreboard.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Restyaboard&lt;br /&gt;
&lt;a href=&#34;http://restya.com/board/&#34;&gt;http://restya.com/board/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;個別のサーバーに実行環境を構築したい場合:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;個別のサーバーに実行環境を構築したい場合&lt;/h4&gt;

&lt;p&gt;各々デモ用のURLが用意されているが、OSSなので個別のサーバー環境や&lt;code&gt;Docker&lt;/code&gt;で試したい場合は、
当ブログに構築手順の記事があるので、参照されたい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.namiking.net/post/2015/09/docker-taiga/&#34;&gt;TAIGA on Dockerで本格アジャイル開発管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.namiking.net/post/2015/09/docker-wekan/&#34;&gt;Wekan on Dockerでお手軽かんばん式プロジェクト管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.namiking.net/post/2015/09/docker-restyaboard/&#34;&gt;Restyaboard on Dockerで多機能かんばん式プロジェクト管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;taiga-本格的なアジャイル開発管理:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;TAIGA - 本格的なアジャイル開発管理&lt;/h2&gt;

&lt;p&gt;本格的なアジャイル開発を支援するプロジェクト管理ツール。
他のかんばん管理ツールに比べて、デザイン洗礼されていて、使っていて気持ちいい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/kanban-board/taiga01.jpg&#34; alt=&#34;TAIGA ScreenShot&#34; /&gt;
&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/kanban-board/taiga03.jpg&#34; alt=&#34;TAIGA ScreenShot&#34; /&gt;
&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/kanban-board/taiga04.jpg&#34; alt=&#34;TAIGA ScreenShot&#34; /&gt;
&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/kanban-board/taiga02.jpg&#34; alt=&#34;TAIGA ScreenShot&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;ここが良かった:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;ここが良かった&lt;/h3&gt;

&lt;h4 id=&#34;アジャイル開発管理に特化したテンプレート:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;アジャイル開発管理に特化したテンプレート&lt;/h4&gt;

&lt;p&gt;全体を見渡せるかんばんボードだけではなく、
期間区切りのスプリントを作成して、バックログからストーリーカードを割り振り、
各タスクの進捗状況を確認できる&lt;code&gt;タスクボード&lt;/code&gt;機能。&lt;/p&gt;

&lt;p&gt;プロジェクト全体の遅延動向をより正確に把握するために、
ストーリーカード毎に設定するポイント(難度重み付け)&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c734c5cb2dac2213cc062a5b86e79214:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c734c5cb2dac2213cc062a5b86e79214:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;と、
ストーリーカードの進捗に基いて描写される&lt;code&gt;バーンダウンチャート&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;感覚的には以前使っていた&lt;code&gt;Redmine&lt;/code&gt;のアジャイル拡張の&lt;code&gt;Alminium&lt;/code&gt;に似ている。&lt;br /&gt;
(アジャイルの管理ツールって概ねこんな感じなのかな)&lt;/p&gt;

&lt;h4 id=&#34;ユーザーごとに権限グループ設定をすることができる:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;ユーザーごとに権限グループ設定をすることができる&lt;/h4&gt;

&lt;p&gt;スプリントを追加できるのはオーナーのみとか、
エンジニア/デザイナーはタスクのみを登録できる。とか、
グループによって、事細かに権限を設定することができる。&lt;/p&gt;

&lt;p&gt;デフォルトの権限グループとしては、&lt;code&gt;UX&lt;/code&gt;,&lt;code&gt;DESIGN&lt;/code&gt;,&lt;code&gt;FRONT&lt;/code&gt;,&lt;code&gt;BACK&lt;/code&gt;,&lt;code&gt;PRODUCT OWNER&lt;/code&gt;などがあるが、こちらも設定で変更できるっぽい。&lt;/p&gt;

&lt;h3 id=&#34;微妙なところ:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;微妙なところ&lt;/h3&gt;

&lt;h4 id=&#34;軽めに使うには複雑すぎるか:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;軽めに使うには複雑すぎるか&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Redmine&lt;/code&gt;拡張の&lt;code&gt;Alminium&lt;/code&gt;を使った時も思ったことだが、
メンバーがアジャイル開発手法に慣れていない場合、
バックログ &amp;gt; スプリント &amp;gt; タスクボードの階層構造に少し戸惑うかもしれない。&lt;/p&gt;

&lt;p&gt;一応、設定からアジャイル開発系のモジュールを無効にできたりするが、
かんばんボードの列名を別の設定画面で行う必要があったりと、少し面倒くさい。
シンプルなTODO表として使うなら、&lt;code&gt;Trello&lt;/code&gt;,&lt;code&gt;Wekan&lt;/code&gt;とかの方がとっつきやすいかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;wekan-お手軽かんばん式プロジェクト管理:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;Wekan - お手軽かんばん式プロジェクト管理&lt;/h2&gt;

&lt;p&gt;ちょっと前は、&lt;code&gt;Libreboard&lt;/code&gt;と呼ばれていて、日本語の紹介サイトも豊富に存在した。
その頃はボード画面から設定画面から、何から何までTrelloにそっくりだったが、
&lt;code&gt;Wekan&lt;/code&gt;に名を変えてから、少しUIにオリジナリティが増したように感じる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/kanban-board/wekan01.jpg&#34; alt=&#34;Wekan ScreenShot&#34; /&gt;
&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/kanban-board/wekan02.jpg&#34; alt=&#34;Wekan ScreenShot&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;ここが良かった-1:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;ここが良かった&lt;/h3&gt;

&lt;h4 id=&#34;シンプル-イズ-ベスト:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;シンプル・イズ・ベスト&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Trello&lt;/code&gt;の基本機能から、更に必要最低限のものに絞ってるので、非常にとっつきやすい。
システム開発に限らず、シンプルなTODO管理にも使えそう。
ひょっとすると、ITアレルギー持ちの老若男女にも使っていただけるかもしれない。&lt;/p&gt;

&lt;p&gt;こういうツールの真髄は、&lt;strong&gt;今どんな課題があるか。どういう状況か。誰が着手してるか。&lt;/strong&gt;を素早く把握することにあるので、
コミュニケーションツールとして割り切るならば、十分だとは思う。&lt;/p&gt;

&lt;h4 id=&#34;日本語uiに対応:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;日本語UIに対応&lt;/h4&gt;

&lt;p&gt;上のログイン画面のスクリーンショットのとおり、デフォルトで日本語に対応している。
ログイン後の画面も右上メニューの&lt;code&gt;Change Languege&lt;/code&gt;から日本語にできる。
英語アレルギー持ちの老若男女にも使っていただけるだろう。&lt;/p&gt;

&lt;h3 id=&#34;微妙なところ-1:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;微妙なところ&lt;/h3&gt;

&lt;h4 id=&#34;アジャイル開発管理に使うにはシンプルすぎるか:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;アジャイル開発管理に使うにはシンプルすぎるか&lt;/h4&gt;

&lt;p&gt;本格的にアジャイル開発に使うには、複数ボードにまたいだりと、
運用テクニックが必要になりそう。
あと、&lt;code&gt;Trello&lt;/code&gt;や&lt;code&gt;Restyaboard&lt;/code&gt;にあるようなチェックリスト機能がないので、
各ストーリーカードの進行状況(タスク状況)をボード上から確認するのは難しい。&lt;/p&gt;

&lt;h2 id=&#34;restyaboard-多機能かんばん式プロジェクト管理:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;Restyaboard - 多機能かんばん式プロジェクト管理&lt;/h2&gt;

&lt;p&gt;基本的には&lt;code&gt;Trello&lt;/code&gt;クローンなのだが、
シンプル化の&lt;code&gt;Wekan&lt;/code&gt;と違い、多機能化を目指している。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/kanban-board/restya01.jpg&#34; alt=&#34;Restyaboard ScreenShot&#34; /&gt;
&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/kanban-board/restya02.jpg&#34; alt=&#34;Restyaboard ScreenShot&#34; /&gt;
&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/kanban-board/restya03.jpg&#34; alt=&#34;Restyaboard ScreenShot&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;ここが良かった-2:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;ここが良かった&lt;/h3&gt;

&lt;h4 id=&#34;他ツールにない前衛的な機能やtrello有料機能が使えたりする:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;他ツールにない前衛的な機能やTrello有料機能が使えたりする&lt;/h4&gt;

&lt;p&gt;例えば、ボードのオーナー以外がストーリーカードを追加することができないが、
ボード一覧による進捗状況確認、カレンダー表示、デスクトップ通知&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c734c5cb2dac2213cc062a5b86e79214:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c734c5cb2dac2213cc062a5b86e79214:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;、ファビコンに新着通知数表示など、他ツールにない前衛的な機能/UIが豊富。&lt;/p&gt;

&lt;p&gt;チェックリスト、Due Date、ボードの背景に写真が使える、などを見ると、
機能面では&lt;code&gt;Wekan&lt;/code&gt;より、こちらのほうが&lt;code&gt;Trello&lt;/code&gt;を意識しているかも。
また、&lt;code&gt;Trello&lt;/code&gt;からデータをインポートする機能が付いているので、
もし無償版では満足できなくなったら、試してみるのもいいかもしれない。&lt;/p&gt;

&lt;h3 id=&#34;微妙なところ-2:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;微妙なところ&lt;/h3&gt;

&lt;h4 id=&#34;ユーザーインタフェースに少し難あり:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;ユーザーインタフェースに少し難あり&lt;/h4&gt;

&lt;p&gt;定期的に再読み込みのロードバーが表示されたり、
デスクトップ通知が絶え間なく表示されたり、
ストーリーカードの詳細ポップアップがグィングイン動いたり、
若干UI効果がうるさいかも。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/RestyaPlatform/board&#34;&gt;GitHub&lt;/a&gt;を見るに、機能面含めて現在開発中のアルファ版という位置づけと思われるので、
今後のバージョンアップに期待したいところ。&lt;/p&gt;

&lt;h2 id=&#34;あとがき:c734c5cb2dac2213cc062a5b86e79214&#34;&gt;あとがき&lt;/h2&gt;

&lt;p&gt;１年ほど前にOSSのかんばんツールを探してた時は、
&lt;code&gt;Redmine&lt;/code&gt;の&lt;code&gt;Alminium&lt;/code&gt;ぐらいしか選択肢がなかった気がしたが、
ものすごいスピードで新サービスが生まれるWeb系の恐ろしさを感じる。&lt;/p&gt;

&lt;p&gt;OSS作者様に感謝すると共に、自分もなにか残してえなあ。と色々弄ってて思った。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:c734c5cb2dac2213cc062a5b86e79214:1&#34;&gt;いまいちピンとこない用語だが、ここでは情報漏洩を気にする企業という意味。内部サーバーだからバッチグーという事ではなく、いかにお固い上席を説得しやすいか。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c734c5cb2dac2213cc062a5b86e79214:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:c734c5cb2dac2213cc062a5b86e79214:2&#34;&gt;フィボナッチ数列っぽいものから重みを選択できる。数列は設定から変更可能。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c734c5cb2dac2213cc062a5b86e79214:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:c734c5cb2dac2213cc062a5b86e79214:3&#34;&gt;Trelloにもデスクトップ通知機能は付いているみたい。&lt;a href=&#34;http://n2p.co.jp/blog/planning/trellotips/&#34;&gt;[参考]&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c734c5cb2dac2213cc062a5b86e79214:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>docker-composeのインストールとバージョン差異エラー回避方法</title>
      <link>http://blog.namiking.net/post/2015/09/install-docker-compose/</link>
      <pubDate>Wed, 02 Sep 2015 08:30:23 +0900</pubDate>
      
      <guid>http://blog.namiking.net/post/2015/09/install-docker-compose/</guid>
      <description>

&lt;p&gt;&lt;code&gt;docker-compose&lt;/code&gt;はDockerコンテナの構成管理ツール。&lt;br /&gt;
昔は&lt;code&gt;fig&lt;/code&gt;という名前のツールだったが、Dockerと統合して名前を変更したとのこと。&lt;/p&gt;

&lt;p&gt;データボリューム, DB, バックエンド、フロントエンドなど、
サービスの稼働に複数コンテナが必要な場合のビルドや立ち上げが非常に楽になる。&lt;/p&gt;

&lt;p&gt;インストール自体はシンプルだが、
Dockerのバージョンによっては実行時にエラーが出てしまうようなので、
エラー回避方法もまとめておく。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Overview of Docker Compose&lt;br /&gt;
&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;https://docs.docker.com/compose/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;インストール手順:fce77b3f97c5854a016ed64fe44c5a99&#34;&gt;インストール手順&lt;/h3&gt;

&lt;p&gt;公式ドキュメントに対応OSごとのインストール方法がまとめてあった。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Docker Compose: Supported installation&lt;br /&gt;
&lt;a href=&#34;https://docs.docker.com/installation/&#34;&gt;https://docs.docker.com/installation/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OS共通の方法で一番簡単なのが、&lt;code&gt;pip&lt;/code&gt;でインストールする方法。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -U docker-compose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pip&lt;/code&gt;がない場合は、&lt;code&gt;easy_install&lt;/code&gt;でインストールできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;easy_install pip
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;バージョン差異エラー回避方法:fce77b3f97c5854a016ed64fe44c5a99&#34;&gt;バージョン差異エラー回避方法&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;docker-compose up&lt;/code&gt;などの実行時に、以下の様なエラーが表示されることがある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;client and server don&#39;t have same version (client : 1.19, server: 1.18)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;原因:fce77b3f97c5854a016ed64fe44c5a99&#34;&gt;原因&lt;/h4&gt;

&lt;p&gt;このエラーは、インストールされている&lt;code&gt;Dockerサーバー&lt;/code&gt;のバージョンと、
&lt;code&gt;docker-composeクライアント(API)&lt;/code&gt;のバージョンに互換性がない時に表示されるらしい。&lt;/p&gt;

&lt;h4 id=&#34;回避方法:fce77b3f97c5854a016ed64fe44c5a99&#34;&gt;回避方法&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;COMPOSE_API_VERSION&lt;/code&gt;環境変数にサーバーのバージョンを設定すれば、
&lt;code&gt;docker-compose&lt;/code&gt;の方で、サーバーのバージョンに合わせて通信してくれるとのこと。
&lt;code&gt;auto&lt;/code&gt;を設定すれば、自動で調整してくれるみたい。便利。&lt;/p&gt;

&lt;p&gt;以下のコマンドを入力するか、&lt;code&gt;/etc/profile&lt;/code&gt;とか&lt;code&gt;~/.bash_profile&lt;/code&gt;あたりに追記しておく。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export COMPOSE_API_VERSION=auto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/etc/environment&lt;/code&gt;に追記する場合は以下のようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;COMPOSE_API_VERSION=auto
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;docker-composeの利用例:fce77b3f97c5854a016ed64fe44c5a99&#34;&gt;docker-composeの利用例&lt;/h3&gt;

&lt;p&gt;当ブログの以下の記事で、具体的な使用例を紹介しているので、参照されたい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.namiking.net/post/2015/09/docker-taiga/&#34;&gt;TAIGA on Dockerで本格アジャイル開発管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.namiking.net/post/2015/09/docker-wekan/&#34;&gt;Wekan on Dockerでお手軽かんばん式プロジェクト管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.namiking.net/post/2015/09/docker-restyaboard/&#34;&gt;Restyaboard on Dockerで多機能かんばん式プロジェクト管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>TAIGA on Dockerで本格アジャイル開発管理</title>
      <link>http://blog.namiking.net/post/2015/09/docker-taiga/</link>
      <pubDate>Tue, 01 Sep 2015 10:30:23 +0900</pubDate>
      
      <guid>http://blog.namiking.net/post/2015/09/docker-taiga/</guid>
      <description>

&lt;p&gt;&lt;code&gt;TAIGA&lt;/code&gt;は、やたらデザインがきれいなアジャイルプロジェクト管理ツール。&lt;br /&gt;
&lt;code&gt;Trello&lt;/code&gt;クローンという感じはなく、&lt;code&gt;Redmine&lt;/code&gt;拡張の&lt;code&gt;Alminium&lt;/code&gt;に似ている。&lt;/p&gt;

&lt;p&gt;ストーリーカードの重み付けやタスクボード、バーンダウンチャートなども備えており、
しっかりとアジャイル開発をやりたい場合はおすすめ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/docker-taiga/taiga01.png&#34; alt=&#34;TAIGA ScreenShot&#34; /&gt;
&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/docker-taiga/taiga02.png&#34; alt=&#34;TAIGA ScreenShot&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Taiga.Io | Agile, Open Source, Free Project Management System&lt;br /&gt;
&lt;a href=&#34;https://taiga.io/&#34;&gt;https://taiga.io/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;dockerを利用した導入手順:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;Dockerを利用した導入手順&lt;/h3&gt;

&lt;p&gt;以下の&lt;code&gt;docker-compose.yml&lt;/code&gt;とイメージを参考/利用させていただきました。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GitHub: htdvisser/taiga-docker&lt;br /&gt;
&lt;a href=&#34;https://github.com/htdvisser/taiga-docker&#34;&gt;https://github.com/htdvisser/taiga-docker&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;00-事前準備:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;00. 事前準備&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt;と&lt;code&gt;docker-compose&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bd8b9a47038f3244ff294ee6ef501def:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:bd8b9a47038f3244ff294ee6ef501def:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;をインストールしておく。&lt;/p&gt;

&lt;h4 id=&#34;01-docker-compose-yml-設置:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;01. docker-compose.yml 設置&lt;/h4&gt;

&lt;p&gt;以下の内容の&lt;code&gt;docker-compose.yml&lt;/code&gt;を設置する。&lt;br /&gt;
&lt;code&gt;hostname&lt;/code&gt;, &lt;code&gt;EMAIL_*&lt;/code&gt;辺りは各々の環境に合わせて書き換える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data:
  image: tianon/true
  volumes:
    - /var/lib/postgresql/data
    - /usr/local/taiga/media
    - /usr/local/taiga/static
    - /usr/local/taiga/logs

db:
  image: postgres
  environment:
    POSTGRES_USER: taiga
    POSTGRES_PASSWORD: password
  volumes_from:
    - data
  restart: always

taigaback:
  image: htdvisser/taiga-back:stable
  hostname: example.com
  environment:
    SECRET_KEY: examplesecretkey
    EMAIL_USE_TLS: True
    EMAIL_HOST: smtp.gmail.com
    EMAIL_PORT: 587
    EMAIL_HOST_USER: example@gmail.com
    EMAIL_HOST_PASSWORD: password
  links:
    - db:postgres
  volumes_from:
    - data
  restart: always

taigafront:
  image: htdvisser/taiga-front-dist:stable
  hostname: example.com
  links:
    - taigaback
  volumes_from:
    - data
  ports:
    - 0.0.0.0:80:80
  restart: always
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;02-docker起動:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;02. Docker起動&lt;/h4&gt;

&lt;p&gt;先ほどの&lt;code&gt;docker-compose.yml&lt;/code&gt;があるディレクトリ内で、以下のコマンドを入力。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;03-足りないdbレコードを挿入:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;03. 足りないDBレコードを挿入&lt;/h4&gt;

&lt;p&gt;Dockerコンテナ起動時に、初期DBデータの挿入が行われるが、
おそらく&lt;code&gt;TAIGA&lt;/code&gt;のバージョンアップで、必要なDBデータが増えたっぽい。&lt;/p&gt;

&lt;p&gt;動作確認時にプロジェクトが作成できない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bd8b9a47038f3244ff294ee6ef501def:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:bd8b9a47038f3244ff294ee6ef501def:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;、などの不具合を起こしていたので、
取り急ぎ、こちらのコマンドで入れておく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it (taigabackコンテナID) \
  python /usr/local/taiga/taiga-back/manage.py \
    loaddata initial_project_templates

docker exec -it (taigabackコンテナID) \
  python /usr/local/taiga/taiga-back/manage.py \
    loaddata initial_project_templates initial_user

docker exec -it (taigabackコンテナID) \
  python /usr/local/taiga/taiga-back/manage.py \
    loaddata initial_project_templates initial_role
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;04-動作確認:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;04. 動作確認&lt;/h4&gt;

&lt;h5 id=&#34;通常画面:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;通常画面&lt;/h5&gt;

&lt;p&gt;画面内の「create your free account here」からユーザー登録を行う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://(SERVER_IP)/
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;管理画面:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;管理画面&lt;/h5&gt;

&lt;p&gt;DBレコード操作などを行う画面？&lt;br /&gt;
通常運用であれば、使わなくてもよい画面と思われる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://(SERVER_IP)/admin/
Username: admin
Password: 123123
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;導入でつまづいた点:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;導入でつまづいた点&lt;/h3&gt;

&lt;h5 id=&#34;新規ユーザー登録ボタン押下後に-次画面に遷移しない:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;新規ユーザー登録ボタン押下後に、次画面に遷移しない。&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;SMTP設定が正しくない。&lt;/li&gt;
&lt;li&gt;Docker起動直後に登録した。(初期DBデータ登録が終わっていない？)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;プロジェクトの作成途中で次画面に遷移しなくなる:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;プロジェクトの作成途中で次画面に遷移しなくなる。&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;追加DBデータを挿入していない。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:bd8b9a47038f3244ff294ee6ef501def:1&#34;&gt;参考： &lt;a href=&#34;http://blog.namiking.net/post/2015/09/install-docker-compose/&#34;&gt;docker-composeのインストールとバージョン差異エラー回避方法&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bd8b9a47038f3244ff294ee6ef501def:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:bd8b9a47038f3244ff294ee6ef501def:2&#34;&gt;参考： &lt;a href=&#34;https://github.com/taigaio/taiga-scripts/issues/23&#34;&gt;https://github.com/taigaio/taiga-scripts/issues/23&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bd8b9a47038f3244ff294ee6ef501def:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Wekan on Dockerでお手軽かんばん式プロジェクト管理</title>
      <link>http://blog.namiking.net/post/2015/09/docker-wekan/</link>
      <pubDate>Tue, 01 Sep 2015 09:30:23 +0900</pubDate>
      
      <guid>http://blog.namiking.net/post/2015/09/docker-wekan/</guid>
      <description>

&lt;p&gt;かんばん式管理ツール&lt;code&gt;Wekan&lt;/code&gt;は&lt;code&gt;Trello&lt;/code&gt;クローンの一つ。&lt;br /&gt;
ちょっと前まで、&lt;code&gt;LibreBoard&lt;/code&gt;という名前の&lt;code&gt;Trello&lt;/code&gt;クローンでしたが、
最近、&lt;code&gt;Wekan&lt;/code&gt;という名前に変わったようです。&lt;br /&gt;
必要最低限の機能がコンパクトにまとまっていて非常に扱いやすい。&lt;/p&gt;

&lt;p&gt;少し触ってみたところ、機能的には&lt;code&gt;LibreBoard&lt;/code&gt;のままで、
以前より見栄えにオリジナリティが増したように感じます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/docker-wekan/wekan01.jpg&#34; alt=&#34;Wekan ScreenShot&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Wekan (旧LibreBoard)&lt;br /&gt;
&lt;a href=&#34;http://newui.libreboard.com&#34;&gt;http://newui.libreboard.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;dockerを利用した導入手順:a3ec11490e4688501750670051fa9d02&#34;&gt;Dockerを利用した導入手順&lt;/h3&gt;

&lt;p&gt;公式のGitHubに置いてあったDockerfileを参考にさせていただく。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GitHub: wekan/wekan&lt;br /&gt;
&lt;a href=&#34;https://github.com/wekan/wekan&#34;&gt;https://github.com/wekan/wekan&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;00-事前準備:a3ec11490e4688501750670051fa9d02&#34;&gt;00. 事前準備&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt;と&lt;code&gt;docker-compose&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a3ec11490e4688501750670051fa9d02:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a3ec11490e4688501750670051fa9d02:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;をインストールしておく。&lt;/p&gt;

&lt;h4 id=&#34;01-docker-compose-yml-設置:a3ec11490e4688501750670051fa9d02&#34;&gt;01. docker-compose.yml 設置&lt;/h4&gt;

&lt;p&gt;以下の内容の&lt;code&gt;docker-compose.yml&lt;/code&gt;を設置する。&lt;br /&gt;
&lt;code&gt;ROOT_URL&lt;/code&gt;辺りを各々の環境に合わせて書き換える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data:
  image: busybox
  volumes:
    - /data/db

mongo:
  image: mongo
  volumes_from:
    - data
  restart: always

wekan:
  image: mquandalle/wekan
  environment:
    MONGO_URL: mongodb://db
    ROOT_URL: http://example.com
  links:
    - mongo:db
  ports:
    - &amp;quot;8080:80&amp;quot;
  restart: always
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;02-docker起動:a3ec11490e4688501750670051fa9d02&#34;&gt;02. Docker起動&lt;/h4&gt;

&lt;p&gt;先ほどの&lt;code&gt;docker-compose.yml&lt;/code&gt;があるディレクトリ内で、以下のコマンドを入力。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;03-動作確認:a3ec11490e4688501750670051fa9d02&#34;&gt;03. 動作確認&lt;/h4&gt;

&lt;p&gt;画面内の「登録する」から、ユーザーを登録を行う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://(SERVER_IP):8080/
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a3ec11490e4688501750670051fa9d02:1&#34;&gt;参考： &lt;a href=&#34;http://blog.namiking.net/post/2015/09/install-docker-compose/&#34;&gt;docker-composeのインストールとバージョン差異エラー回避方法&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a3ec11490e4688501750670051fa9d02:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Restyaboard on Dockerで多機能かんばん式プロジェクト管理</title>
      <link>http://blog.namiking.net/post/2015/09/docker-restyaboard/</link>
      <pubDate>Tue, 01 Sep 2015 08:30:23 +0900</pubDate>
      
      <guid>http://blog.namiking.net/post/2015/09/docker-restyaboard/</guid>
      <description>

&lt;p&gt;&lt;code&gt;Restyaboard&lt;/code&gt;は&lt;code&gt;Trello&lt;/code&gt;クローンの一つですが、UIは前衛的で多機能。&lt;br /&gt;
Trelloだと、有料ユーザーしかできないことが、普通にできたりする。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/docker-restyaboard/restyaboard01.jpg&#34; alt=&#34;Restyaboard ScreenShot&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Restyaboard&lt;br /&gt;
&lt;a href=&#34;http://restya.com/board/&#34;&gt;http://restya.com/board/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;dockerを利用した導入手順:e066c3646c5551a0ffd1b68896a78fd2&#34;&gt;Dockerを利用した導入手順&lt;/h3&gt;

&lt;p&gt;公式ページに必要なミドルウェアは書いてあるが、
導入手順が書かれていないっぽい。
ちみちみデバッグしながら、構築した手順を&lt;code&gt;Dockerfile&lt;/code&gt;にまとめておいた。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GitHub: namikingsoft/docker-restyaboard&lt;br /&gt;
&lt;a href=&#34;https://github.com/namikingsoft/docker-restyaboard&#34;&gt;https://github.com/namikingsoft/docker-restyaboard&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;00-事前準備:e066c3646c5551a0ffd1b68896a78fd2&#34;&gt;00. 事前準備&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt;と&lt;code&gt;docker-compose&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e066c3646c5551a0ffd1b68896a78fd2:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e066c3646c5551a0ffd1b68896a78fd2:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;をインストールしておく。&lt;/p&gt;

&lt;h4 id=&#34;01-dockerイメージビルドとコンテナ起動:e066c3646c5551a0ffd1b68896a78fd2&#34;&gt;01. Dockerイメージビルドとコンテナ起動&lt;/h4&gt;

&lt;p&gt;以下のコマンドで、Docker環境を構築できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/namikingsoft/docker-restyaboard.git
cd docker-restyaboard

docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;docker-compose up -d&lt;/code&gt;でイメージのビルドとコンテナ起動を全て自動でやってくれる。
イメージビルドにそこそこ時間が掛かるので注意。&lt;/p&gt;

&lt;h4 id=&#34;02-動作確認:e066c3646c5551a0ffd1b68896a78fd2&#34;&gt;02. 動作確認&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;http://(ServerIP):1234

管理ユーザー
Username: admin
Password: restya

一般ユーザー
Username: user
Password: restya
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:e066c3646c5551a0ffd1b68896a78fd2:1&#34;&gt;参考： &lt;a href=&#34;http://blog.namiking.net/post/2015/09/install-docker-compose/&#34;&gt;docker-composeのインストールとバージョン差異エラー回避方法&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e066c3646c5551a0ffd1b68896a78fd2:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>