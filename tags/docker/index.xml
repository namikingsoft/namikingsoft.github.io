<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Namiking.net</title>
    <link>http://blog.namiking.net/tags/docker/</link>
    <description>Recent content in Docker on Namiking.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp-ja</language>
    <lastBuildDate>Sun, 10 Jan 2016 18:00:23 +0900</lastBuildDate>
    <atom:link href="http://blog.namiking.net/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>DigitalOceanでマルチホストなDockerSwarmクラスタを構築するときのポイント</title>
      <link>http://blog.namiking.net/post/2016/01/docker-swarm-digitalocean/</link>
      <pubDate>Sun, 10 Jan 2016 18:00:23 +0900</pubDate>
      
      <guid>http://blog.namiking.net/post/2016/01/docker-swarm-digitalocean/</guid>
      <description>

&lt;p&gt;Docker公式の&lt;a href=&#34;https://docs.docker.com/engine/userguide/networking/get-started-overlay/&#34;&gt;Get started with multi-host networking&lt;/a&gt;を参考に、DigitalOceanでSwarmクラスタを構築してみたが、いくつか工夫が必要なポイントがあったので、まとめておく。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.namiking.net/images/post/2016/01/docker-swarm-digitalocean/logos.png&#34; alt=&#34;Docker Swarm + DigitalOcean&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;事前準備:fa799c0a70e6a2da19a2eb6d62e423f4&#34;&gt;事前準備&lt;/h3&gt;

&lt;h4 id=&#34;必要なソフトウェアのインストール:fa799c0a70e6a2da19a2eb6d62e423f4&#34;&gt;必要なソフトウェアのインストール&lt;/h4&gt;

&lt;p&gt;作業で使うPC(またはホスト)に以下のDocker関連のソフトウェアをインストールしておく。Dockerのオーバーレイネットワーク機能を使うので、それを利用できるバージョンを入れる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;docker (1.9以上)&lt;/li&gt;
&lt;li&gt;docker-compose (1.5以上)&lt;/li&gt;
&lt;li&gt;docker-machine&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;digitaloceanの登録とアクセストークンの取得:fa799c0a70e6a2da19a2eb6d62e423f4&#34;&gt;DigitalOceanの登録とアクセストークンの取得&lt;/h4&gt;

&lt;p&gt;登録後、管理画面からdocker-machineとの連携に必要なアクセストークンを発行できる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;https://www.digitalocean.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;気をつけたいポイント４つ:fa799c0a70e6a2da19a2eb6d62e423f4&#34;&gt;気をつけたいポイント４つ&lt;/h3&gt;

&lt;h4 id=&#34;01-ホストosはkernel3-16以上のものを使う:fa799c0a70e6a2da19a2eb6d62e423f4&#34;&gt;01. ホストOSはKernel3.16以上のものを使う&lt;/h4&gt;

&lt;p&gt;例えば、ホストOSにUbuntu14.04を選んでいると、オーバーレイ・ネットワーク上にのコンテナを立ち上げる時にエラーが出る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose up -d -x-networking

Creating network &amp;quot;xxx&amp;quot; with driver &amp;quot;overlay&amp;quot;
Creating yyy
ERROR: Cannot start container (container_id):
  subnet sandbox join failed for &amp;quot;10.0.0.0/24&amp;quot;:
  vxlan interface creation failed for
  subnet &amp;quot;10.0.0.0/24&amp;quot;: failed in prefunc:
  failed to set namespace on link &amp;quot;vxlanf9ac2ad&amp;quot;: invalid argument
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/userguide/networking/get-started-overlay/&#34;&gt;Get started with multi-host networking&lt;/a&gt;によると、「A host with a 3.16 kernel version or higher.」とのこと。DigitalOceanのUbuntu14.04はカーネルが古いようなので、14.10とか15.04以上を使う必要がある。&lt;/p&gt;

&lt;h4 id=&#34;02-cluster-advertiseはeth0にするか-privatenetworkを有効にする:fa799c0a70e6a2da19a2eb6d62e423f4&#34;&gt;02. cluster-advertiseはeth0にするか、PrivateNetworkを有効にする&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/userguide/networking/get-started-overlay/&#34;&gt;Get started with multi-host networking&lt;/a&gt;のサンプルをそのまま使うと、&lt;code&gt;docker-machine create&lt;/code&gt;時に概ね次のようなエラーに遭遇する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine create \
  ...
  --engine-opt &amp;quot;cluster-advertise=eth1:2376&amp;quot; \
  ...

Error creating machine: Error running provisioning:
Unable to verify the Docker daemon is listening: Maximum number of retries (10) exceeded
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;現状、DigitalOceanの&lt;code&gt;eth1&lt;/code&gt;はプライベートネットワークのインタフェースで、デフォルト設定では、プライベートネットワークにIPが割り当てられない。&lt;/p&gt;

&lt;p&gt;なので、公開ネットワークの&lt;code&gt;eth0&lt;/code&gt;を使うか、&lt;code&gt;docker-machine create&lt;/code&gt;時に、全てのノードに&lt;code&gt;--digitalocean-private-networking&lt;/code&gt;をつけて、プライベートネットワークを有効にする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-machine create
  ...
  --engine-opt &amp;quot;cluster-advertise=eth0:2376&amp;quot; \
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-machine create
  ...
  --engine-opt &amp;quot;cluster-advertise=eth1:2376&amp;quot; \
  --digitalocean-private-networking \
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;03-consulはswarmクラスタ上に置いて節約する:fa799c0a70e6a2da19a2eb6d62e423f4&#34;&gt;03. ConsulはSwarmクラスタ上に置いて節約する&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/userguide/networking/get-started-overlay/&#34;&gt;公式ドキュメント&lt;/a&gt;のサンプルでは、Consulキーストアで専用のホストを用意しているが、安いとはいえ、DigitalOceanでConsulキーストア専用にもつのは守銭奴らしからぬので、Swarmマスターやノードホストに含めてしまおう。&lt;/p&gt;

&lt;p&gt;Swarmクラスタのノードを作成するときに、ConsulのURLを指定する場所があるが、作成時にはConsulキーストアが存在しなくても、Swarmが後々定期的にキーストアを更新してくれるようなので、割りと気にせずにノード構築後にConsulを導入できる。&lt;/p&gt;

&lt;p&gt;ただ、サンプルのように、ConsulをDockerコンテナで導入してしまうと、&lt;code&gt;docker ps&lt;/code&gt;時に、いつもリストに出てきてしまうので、気になる方はDocker上ではなく、ホストに直接インストールしてしまったほうが良い。(バイナリファイル１つだし)&lt;/p&gt;

&lt;p&gt;あと、Consulらしく全ノードに設置して、ヘルスチェックなどが出来ると良さそう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.namiking.net/images/post/2016/01/docker-swarm-digitalocean/structure.svg&#34; alt=&#34;Docker Swarm + DigitalOcean&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;04-consulはプライベートネットワークに置く:fa799c0a70e6a2da19a2eb6d62e423f4&#34;&gt;04. Consulはプライベートネットワークに置く&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/userguide/networking/get-started-overlay/&#34;&gt;公式ドキュメント&lt;/a&gt;の感覚で、DigitalOceanにConsulキーストアを導入すると、グローバルにWebUIが公開されてしまい、精神的によろしくない。&lt;/p&gt;

&lt;p&gt;DigitalOceanには、一応プライベートネットワーク機能が用意されていて、管理画面やdocker-machineの引数から有効にできる。Consulはプライベートネットワーク側(eth1)のIPをバインドするとよい。&lt;/p&gt;

&lt;p&gt;プライベートネットワークにConsulを置くと、WebUIなどはグローバルIPから確認できなくなる。ブラウザからWebUIを確認したくなった場合は、SSHトンネルを利用して、8500ポートをフォワーディングしてやると楽。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh root@(マシンIP) \
  -i ~/.docker/machine/machines/(マシンID)/id_rsa \
  -L8500:localhost:8500

# ブラウザから開く
open http://localhost:8500
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;br /&gt;
プライベートネットワークといっても、
リージョンごとのネットワークのようなので、
あまり過信しないほうがよいみたい。&lt;/p&gt;

&lt;p&gt;使う前に知りたかったDigitalOceanまとめ
&lt;a href=&#34;http://pocketstudio.jp/log3/2015/04/13/digitalocean_introduction/&#34;&gt;http://pocketstudio.jp/log3/2015/04/13/digitalocean_introduction/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;具体的な実行手順:fa799c0a70e6a2da19a2eb6d62e423f4&#34;&gt;具体的な実行手順&lt;/h3&gt;

&lt;p&gt;自動化しやすいように、上のポイント４つを踏まえたシェルの実行手順を以下にまとめる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# マスター作成
docker-machine create \
  --driver digitalocean \
  --digitalocean-access-token ${DIGITALOCEAN_TOKEN} \
  --digitalocean-image &amp;quot;ubuntu-15-10-x64&amp;quot; \
  --digitalocean-region &amp;quot;sgp1&amp;quot; \
  --digitalocean-size &amp;quot;512mb&amp;quot; \
  --digitalocean-private-networking \
  --swarm --swarm-master \
  --swarm-discovery \
    &amp;quot;consul://localhost:8500&amp;quot; \
  --engine-opt \
    &amp;quot;cluster-store=consul://localhost:8500&amp;quot; \
  --engine-opt &amp;quot;cluster-advertise=eth1:2376&amp;quot; \
  swarm-master

# マスターにConsulを設置
docker-machine ssh swarm-master &amp;quot;
  apt-get install -y at zip &amp;amp;&amp;amp;\
  cd /tmp &amp;amp;&amp;amp;\
  curl -LO https://releases.hashicorp.com/consul/0.6.1/consul_0.6.1_linux_amd64.zip &amp;amp;&amp;amp;\
  unzip consul_0.6.1_linux_amd64.zip &amp;amp;&amp;amp;\
  mv consul /usr/local/bin &amp;amp;&amp;amp;\
  curl -LO https://releases.hashicorp.com/consul/0.6.1/consul_0.6.1_web_ui.zip &amp;amp;&amp;amp;\
  unzip consul_0.6.1_web_ui.zip -d consul-webui &amp;amp;&amp;amp;\
  echo \&amp;quot;
    consul agent \
      -server -bootstrap-expect=1 \
      -node=consul00 \
      -data-dir=/tmp/consul \
      --ui-dir=/tmp/consul-webui \
      -bind=\$(
        ip addr show eth1 \
        | grep -o -e &#39;[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+&#39; \
        | head -n1
      ) \
    &amp;gt;&amp;gt; /var/log/consul.log
  \&amp;quot; | at now
&amp;quot;

# マスターのプライベートIPを取得
MASTER_PRIVATE_IP=$(
  docker-machine ssh $MASTER_NODE_NAME &amp;quot;
    ip addr show eth1 \
    | grep -o -e &#39;[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+&#39; \
    | head -n1
  &amp;quot;
)

# ノード作成
docker-machine create \
  --driver digitalocean \
  --digitalocean-access-token ${DIGITALOCEAN_TOKEN} \
  --digitalocean-image &amp;quot;ubuntu-15-10-x64&amp;quot; \
  --digitalocean-region &amp;quot;sgp1&amp;quot; \
  --digitalocean-size &amp;quot;512mb&amp;quot; \
  --digitalocean-private-networking \
  --swarm \
  --swarm-discovery \
    &amp;quot;consul://localhost:8500&amp;quot; \
  --engine-opt \
    &amp;quot;cluster-store=consul://localhost:8500&amp;quot; \
  --engine-opt &amp;quot;cluster-advertise=eth1:2376&amp;quot; \
  swarm-node01

# ノードにConsulを設置
docker-machine ssh swarm-node01 &amp;quot;
  apt-get install -y at zip &amp;amp;&amp;amp;\
  cd /tmp &amp;amp;&amp;amp;\
  curl -LO https://releases.hashicorp.com/consul/0.6.1/consul_0.6.1_linux_amd64.zip &amp;amp;&amp;amp;\
  unzip consul_0.6.1_linux_amd64.zip &amp;amp;&amp;amp;\
  mv consul /usr/local/bin &amp;amp;&amp;amp;\
  echo \&amp;quot;
    consul agent \
      -join=$MASTER_PRIVATE_IP \
      -node=consul01 \
      -data-dir=/tmp/consul \
      -bind=\$(
        ip addr show eth1 \
        | grep -o -e &#39;[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+&#39; \
        | head -n1
      ) \
    &amp;gt;&amp;gt; /var/log/consul.log
  \&amp;quot; | at now
&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;注記いくつか:fa799c0a70e6a2da19a2eb6d62e423f4&#34;&gt;注記いくつか&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;シェル中の&lt;code&gt;${DIGITALOCEAN_TOKEN}&lt;/code&gt;はDigitalOceanの管理画面から取得したアクセストークンに置き換える。&lt;/li&gt;
&lt;li&gt;Consul起動に&lt;code&gt;at now&lt;/code&gt;コマンドを使っているのは、&lt;code&gt;nohup&lt;/code&gt;や&lt;code&gt;&amp;amp;&lt;/code&gt;を使っても、Consulがフォアグラウンドで走ってしまい、バッチ処理が途中で止まってしまうため。&lt;code&gt;docker-machine ssh&lt;/code&gt;の仕様の問題？&lt;/li&gt;
&lt;li&gt;Consul実行時にbindに指定しているのは、自身のプライベートIP。&lt;/li&gt;
&lt;li&gt;途中で、マスターのプライベートIPを取得しているのは、各ノードに設置したConsulクライアントをサーバーにJOINさせるため。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Dockerイメージのビルド中にExitedしたコンテナに入る方法</title>
      <link>http://blog.namiking.net/post/2015/09/docker-exec-exited/</link>
      <pubDate>Tue, 29 Sep 2015 08:00:00 +0900</pubDate>
      
      <guid>http://blog.namiking.net/post/2015/09/docker-exec-exited/</guid>
      <description>

&lt;p&gt;長めのansible-playbookをRUNしてる途中でエラーが出た時に役立ったので、まとめておく。&lt;/p&gt;

&lt;h3 id=&#34;どういう時に使う:f5fa53b0fb4decf6fe205e1fa30242da&#34;&gt;どういう時に使う？&lt;/h3&gt;

&lt;p&gt;例えば、&lt;code&gt;docker build&lt;/code&gt;途中によくわからない理由でエラー落ちした時、
直前状態のコンテナに入ってデバッグしたい事がある。&lt;/p&gt;

&lt;p&gt;ビルドに失敗した後、&lt;code&gt;docker ps -a&lt;/code&gt;すると、
&lt;code&gt;Exited&lt;/code&gt;したビルド作業用のコンテナが消されずに残っているので、
このコンテナの中にシェルで入れれば、エラーの詳細を調べられる。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;コンテナだけでなく、直近のイメージも残っているが、
Dockerコマンド単位でコミットされるため、
数珠つなぎのRUNとか、ansibleやchefなどのプロビジョニングツールを併用した時に、
大幅にロールバックしていることがある。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;ビルド途中にエラーで落ちるdockerfileの例:f5fa53b0fb4decf6fe205e1fa30242da&#34;&gt;ビルド途中にエラーで落ちるDockerfileの例&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-docker&#34;&gt;FROM busybox

RUN touch /step1
RUN touch /step2 &amp;amp;&amp;amp; errcmd &amp;amp;&amp;amp; touch /step3
RUN touch /step4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;errcmd&lt;/code&gt;という架空のコマンドで、わざとエラーを起こしてみる。&lt;/p&gt;

&lt;h4 id=&#34;docker-build-の途中で落ちる:f5fa53b0fb4decf6fe205e1fa30242da&#34;&gt;docker build の途中で落ちる&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker build . -t tset

Sending build context to Docker daemon 2.048 kB
Sending build context to Docker daemon
Step 0 : FROM busybox
latest: Pulling from library/busybox
cfa753dfea5e: Pull complete
d7057cb02084: Pull complete
library/busybox:latest: The image you are pulling has been verified. Important: image verification is a tech preview feature and should not be relied on to provide security.
Digest: sha256:16a2a52884c2a9481ed267c2d46483eac7693b813a63132368ab098a71303f8a
Status: Downloaded newer image for busybox:latest
 ---&amp;gt; d7057cb02084
Step 1 : RUN touch /step1
 ---&amp;gt; Running in f1ca76c9072d
 ---&amp;gt; ef649ff08895
Removing intermediate container f1ca76c9072d
Step 2 : RUN touch /step2 &amp;amp;&amp;amp; errcmd &amp;amp;&amp;amp; touch /step3
 ---&amp;gt; Running in d117aa39bacd
/bin/sh: errcmd: not found
The command &#39;/bin/sh -c touch /step2 &amp;amp;&amp;amp; errcmd &amp;amp;&amp;amp; touch /step3&#39; returned a non-zero code: 127
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;途中にある&lt;code&gt;---&amp;gt; Running in d117aa39bacd&lt;/code&gt;の次で止まっている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker ps -q --filter status=exited

d117aa39bacd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;d117aa39bacd&lt;/code&gt;コンテナが消されずに残っている。&lt;br /&gt;
これが直近の作業コンテナで&lt;code&gt;touch /step2&lt;/code&gt;までのコマンドを実行されているはず。&lt;/p&gt;

&lt;h4 id=&#34;exitedなコンテナには入れない:f5fa53b0fb4decf6fe205e1fa30242da&#34;&gt;Exitedなコンテナには入れない？&lt;/h4&gt;

&lt;p&gt;生きているコンテナであれば、&lt;code&gt;docker exec&lt;/code&gt;+シェルでコンテナの中に入れるが、
Exitedしていると、以下の様なエラーが出る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker exec -it d117aa39bacd sh

Error response from daemon: Container d117aa39bacd is not running
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;解決手順:f5fa53b0fb4decf6fe205e1fa30242da&#34;&gt;解決手順&lt;/h3&gt;

&lt;h4 id=&#34;１-exitedコンテナを一旦コミットして-イメージ化する:f5fa53b0fb4decf6fe205e1fa30242da&#34;&gt;１．Exitedコンテナを一旦コミットして、イメージ化する&lt;/h4&gt;

&lt;p&gt;死んでいるコンテナをコミットするという機会があまりなかったので、
ちょっと戸惑ったが、以下のコマンドでイメージ化できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker commit -t exited d117aa39bacd
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;２-インタラクティブ-ttyモードで実行する:f5fa53b0fb4decf6fe205e1fa30242da&#34;&gt;２．インタラクティブ+TTYモードで実行する&lt;/h4&gt;

&lt;p&gt;そのまま&lt;code&gt;docker run&lt;/code&gt;しても速攻で死ぬので、&lt;code&gt;-it bash&lt;/code&gt;をつけて実行。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run --rm -it exited sh
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# ls / | grep step
step1
step2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちょっとまどろっこいが、一応エラーコマンド直前の状態のコンテナに入れた。
同じRUNコマンドの中でエラーが起きても、&lt;code&gt;touch /step2&lt;/code&gt;までは実行されているようだ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>docker-composeのインストールとバージョン差異エラー回避方法</title>
      <link>http://blog.namiking.net/post/2015/09/install-docker-compose/</link>
      <pubDate>Wed, 02 Sep 2015 08:30:23 +0900</pubDate>
      
      <guid>http://blog.namiking.net/post/2015/09/install-docker-compose/</guid>
      <description>

&lt;p&gt;&lt;code&gt;docker-compose&lt;/code&gt;はDockerコンテナの構成管理ツール。&lt;br /&gt;
昔は&lt;code&gt;fig&lt;/code&gt;という名前のツールだったが、Dockerと統合して名前を変更したとのこと。&lt;/p&gt;

&lt;p&gt;データボリューム, DB, バックエンド、フロントエンドなど、
サービスの稼働に複数コンテナが必要な場合のビルドや立ち上げが非常に楽になる。&lt;/p&gt;

&lt;p&gt;インストール自体はシンプルだが、
Dockerのバージョンによっては実行時にエラーが出てしまうようなので、
エラー回避方法もまとめておく。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Overview of Docker Compose&lt;br /&gt;
&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;https://docs.docker.com/compose/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;インストール手順:fce77b3f97c5854a016ed64fe44c5a99&#34;&gt;インストール手順&lt;/h3&gt;

&lt;p&gt;公式ドキュメントに対応OSごとのインストール方法がまとめてあった。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Docker Compose: Supported installation&lt;br /&gt;
&lt;a href=&#34;https://docs.docker.com/installation/&#34;&gt;https://docs.docker.com/installation/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OS共通の方法で一番簡単なのが、&lt;code&gt;pip&lt;/code&gt;でインストールする方法。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -U docker-compose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pip&lt;/code&gt;がない場合は、&lt;code&gt;easy_install&lt;/code&gt;でインストールできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;easy_install pip
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;バージョン差異エラー回避方法:fce77b3f97c5854a016ed64fe44c5a99&#34;&gt;バージョン差異エラー回避方法&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;docker-compose up&lt;/code&gt;などの実行時に、以下の様なエラーが表示されることがある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;client and server don&#39;t have same version (client : 1.19, server: 1.18)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;原因:fce77b3f97c5854a016ed64fe44c5a99&#34;&gt;原因&lt;/h4&gt;

&lt;p&gt;このエラーは、インストールされている&lt;code&gt;Dockerサーバー&lt;/code&gt;のバージョンと、
&lt;code&gt;docker-composeクライアント(API)&lt;/code&gt;のバージョンに互換性がない時に表示されるらしい。&lt;/p&gt;

&lt;h4 id=&#34;回避方法:fce77b3f97c5854a016ed64fe44c5a99&#34;&gt;回避方法&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;COMPOSE_API_VERSION&lt;/code&gt;環境変数にサーバーのバージョンを設定すれば、
&lt;code&gt;docker-compose&lt;/code&gt;の方で、サーバーのバージョンに合わせて通信してくれるとのこと。
&lt;code&gt;auto&lt;/code&gt;を設定すれば、自動で調整してくれるみたい。便利。&lt;/p&gt;

&lt;p&gt;以下のコマンドを入力するか、&lt;code&gt;/etc/profile&lt;/code&gt;とか&lt;code&gt;~/.bash_profile&lt;/code&gt;あたりに追記しておく。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export COMPOSE_API_VERSION=auto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/etc/environment&lt;/code&gt;に追記する場合は以下のようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;COMPOSE_API_VERSION=auto
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;docker-composeの利用例:fce77b3f97c5854a016ed64fe44c5a99&#34;&gt;docker-composeの利用例&lt;/h3&gt;

&lt;p&gt;当ブログの以下の記事で、具体的な使用例を紹介しているので、参照されたい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.namiking.net/post/2015/09/docker-taiga/&#34;&gt;TAIGA on Dockerで本格アジャイル開発管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.namiking.net/post/2015/09/docker-wekan/&#34;&gt;Wekan on Dockerでお手軽かんばん式プロジェクト管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.namiking.net/post/2015/09/docker-restyaboard/&#34;&gt;Restyaboard on Dockerで多機能かんばん式プロジェクト管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>TAIGA on Dockerで本格アジャイル開発管理</title>
      <link>http://blog.namiking.net/post/2015/09/docker-taiga/</link>
      <pubDate>Tue, 01 Sep 2015 10:30:23 +0900</pubDate>
      
      <guid>http://blog.namiking.net/post/2015/09/docker-taiga/</guid>
      <description>

&lt;p&gt;&lt;code&gt;TAIGA&lt;/code&gt;は、やたらデザインがきれいなアジャイルプロジェクト管理ツール。&lt;br /&gt;
&lt;code&gt;Trello&lt;/code&gt;クローンという感じはなく、&lt;code&gt;Redmine&lt;/code&gt;拡張の&lt;code&gt;Alminium&lt;/code&gt;に似ている。&lt;/p&gt;

&lt;p&gt;ストーリーカードの重み付けやタスクボード、バーンダウンチャートなども備えており、
しっかりとアジャイル開発をやりたい場合はおすすめ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/docker-taiga/taiga01.png&#34; alt=&#34;TAIGA ScreenShot&#34; /&gt;
&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/docker-taiga/taiga02.png&#34; alt=&#34;TAIGA ScreenShot&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Taiga.Io | Agile, Open Source, Free Project Management System&lt;br /&gt;
&lt;a href=&#34;https://taiga.io/&#34;&gt;https://taiga.io/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;dockerを利用した導入手順:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;Dockerを利用した導入手順&lt;/h3&gt;

&lt;p&gt;以下の&lt;code&gt;docker-compose.yml&lt;/code&gt;とイメージを参考/利用させていただきました。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GitHub: htdvisser/taiga-docker&lt;br /&gt;
&lt;a href=&#34;https://github.com/htdvisser/taiga-docker&#34;&gt;https://github.com/htdvisser/taiga-docker&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;00-事前準備:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;00. 事前準備&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt;と&lt;code&gt;docker-compose&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bd8b9a47038f3244ff294ee6ef501def:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:bd8b9a47038f3244ff294ee6ef501def:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;をインストールしておく。&lt;/p&gt;

&lt;h4 id=&#34;01-docker-compose-yml-設置:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;01. docker-compose.yml 設置&lt;/h4&gt;

&lt;p&gt;以下の内容の&lt;code&gt;docker-compose.yml&lt;/code&gt;を設置する。&lt;br /&gt;
&lt;code&gt;hostname&lt;/code&gt;, &lt;code&gt;EMAIL_*&lt;/code&gt;辺りは各々の環境に合わせて書き換える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data:
  image: tianon/true
  volumes:
    - /var/lib/postgresql/data
    - /usr/local/taiga/media
    - /usr/local/taiga/static
    - /usr/local/taiga/logs

db:
  image: postgres
  environment:
    POSTGRES_USER: taiga
    POSTGRES_PASSWORD: password
  volumes_from:
    - data
  restart: always

taigaback:
  image: htdvisser/taiga-back:stable
  hostname: example.com
  environment:
    SECRET_KEY: examplesecretkey
    EMAIL_USE_TLS: True
    EMAIL_HOST: smtp.gmail.com
    EMAIL_PORT: 587
    EMAIL_HOST_USER: example@gmail.com
    EMAIL_HOST_PASSWORD: password
  links:
    - db:postgres
  volumes_from:
    - data
  restart: always

taigafront:
  image: htdvisser/taiga-front-dist:stable
  hostname: example.com
  links:
    - taigaback
  volumes_from:
    - data
  ports:
    - 0.0.0.0:80:80
  restart: always
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;02-docker起動:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;02. Docker起動&lt;/h4&gt;

&lt;p&gt;先ほどの&lt;code&gt;docker-compose.yml&lt;/code&gt;があるディレクトリ内で、以下のコマンドを入力。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;03-足りないdbレコードを挿入:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;03. 足りないDBレコードを挿入&lt;/h4&gt;

&lt;p&gt;Dockerコンテナ起動時に、初期DBデータの挿入が行われるが、
おそらく&lt;code&gt;TAIGA&lt;/code&gt;のバージョンアップで、必要なDBデータが増えたっぽい。&lt;/p&gt;

&lt;p&gt;動作確認時にプロジェクトが作成できない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bd8b9a47038f3244ff294ee6ef501def:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:bd8b9a47038f3244ff294ee6ef501def:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;、などの不具合を起こしていたので、
取り急ぎ、こちらのコマンドで入れておく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it (taigabackコンテナID) \
  python /usr/local/taiga/taiga-back/manage.py \
    loaddata initial_project_templates

docker exec -it (taigabackコンテナID) \
  python /usr/local/taiga/taiga-back/manage.py \
    loaddata initial_project_templates initial_user

docker exec -it (taigabackコンテナID) \
  python /usr/local/taiga/taiga-back/manage.py \
    loaddata initial_project_templates initial_role
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;04-動作確認:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;04. 動作確認&lt;/h4&gt;

&lt;h5 id=&#34;通常画面:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;通常画面&lt;/h5&gt;

&lt;p&gt;画面内の「create your free account here」からユーザー登録を行う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://(SERVER_IP)/
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;管理画面:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;管理画面&lt;/h5&gt;

&lt;p&gt;DBレコード操作などを行う画面？&lt;br /&gt;
通常運用であれば、使わなくてもよい画面と思われる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://(SERVER_IP)/admin/
Username: admin
Password: 123123
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;導入でつまづいた点:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;導入でつまづいた点&lt;/h3&gt;

&lt;h5 id=&#34;新規ユーザー登録ボタン押下後に-次画面に遷移しない:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;新規ユーザー登録ボタン押下後に、次画面に遷移しない。&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;SMTP設定が正しくない。&lt;/li&gt;
&lt;li&gt;Docker起動直後に登録した。(初期DBデータ登録が終わっていない？)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;プロジェクトの作成途中で次画面に遷移しなくなる:bd8b9a47038f3244ff294ee6ef501def&#34;&gt;プロジェクトの作成途中で次画面に遷移しなくなる。&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;追加DBデータを挿入していない。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:bd8b9a47038f3244ff294ee6ef501def:1&#34;&gt;参考： &lt;a href=&#34;http://blog.namiking.net/post/2015/09/install-docker-compose/&#34;&gt;docker-composeのインストールとバージョン差異エラー回避方法&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bd8b9a47038f3244ff294ee6ef501def:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:bd8b9a47038f3244ff294ee6ef501def:2&#34;&gt;参考： &lt;a href=&#34;https://github.com/taigaio/taiga-scripts/issues/23&#34;&gt;https://github.com/taigaio/taiga-scripts/issues/23&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bd8b9a47038f3244ff294ee6ef501def:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Wekan on Dockerでお手軽かんばん式プロジェクト管理</title>
      <link>http://blog.namiking.net/post/2015/09/docker-wekan/</link>
      <pubDate>Tue, 01 Sep 2015 09:30:23 +0900</pubDate>
      
      <guid>http://blog.namiking.net/post/2015/09/docker-wekan/</guid>
      <description>

&lt;p&gt;かんばん式管理ツール&lt;code&gt;Wekan&lt;/code&gt;は&lt;code&gt;Trello&lt;/code&gt;クローンの一つ。&lt;br /&gt;
ちょっと前まで、&lt;code&gt;LibreBoard&lt;/code&gt;という名前の&lt;code&gt;Trello&lt;/code&gt;クローンでしたが、
最近、&lt;code&gt;Wekan&lt;/code&gt;という名前に変わったようです。&lt;br /&gt;
必要最低限の機能がコンパクトにまとまっていて非常に扱いやすい。&lt;/p&gt;

&lt;p&gt;少し触ってみたところ、機能的には&lt;code&gt;LibreBoard&lt;/code&gt;のままで、
以前より見栄えにオリジナリティが増したように感じます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/docker-wekan/wekan01.jpg&#34; alt=&#34;Wekan ScreenShot&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Wekan (旧LibreBoard)&lt;br /&gt;
&lt;a href=&#34;http://newui.libreboard.com&#34;&gt;http://newui.libreboard.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;dockerを利用した導入手順:a3ec11490e4688501750670051fa9d02&#34;&gt;Dockerを利用した導入手順&lt;/h3&gt;

&lt;p&gt;公式のGitHubに置いてあったDockerfileを参考にさせていただく。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GitHub: wekan/wekan&lt;br /&gt;
&lt;a href=&#34;https://github.com/wekan/wekan&#34;&gt;https://github.com/wekan/wekan&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;00-事前準備:a3ec11490e4688501750670051fa9d02&#34;&gt;00. 事前準備&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt;と&lt;code&gt;docker-compose&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a3ec11490e4688501750670051fa9d02:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a3ec11490e4688501750670051fa9d02:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;をインストールしておく。&lt;/p&gt;

&lt;h4 id=&#34;01-docker-compose-yml-設置:a3ec11490e4688501750670051fa9d02&#34;&gt;01. docker-compose.yml 設置&lt;/h4&gt;

&lt;p&gt;以下の内容の&lt;code&gt;docker-compose.yml&lt;/code&gt;を設置する。&lt;br /&gt;
&lt;code&gt;ROOT_URL&lt;/code&gt;辺りを各々の環境に合わせて書き換える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data:
  image: busybox
  volumes:
    - /data/db

mongo:
  image: mongo
  volumes_from:
    - data
  restart: always

wekan:
  image: mquandalle/wekan
  environment:
    MONGO_URL: mongodb://db
    ROOT_URL: http://example.com
  links:
    - mongo:db
  ports:
    - &amp;quot;8080:80&amp;quot;
  restart: always
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;02-docker起動:a3ec11490e4688501750670051fa9d02&#34;&gt;02. Docker起動&lt;/h4&gt;

&lt;p&gt;先ほどの&lt;code&gt;docker-compose.yml&lt;/code&gt;があるディレクトリ内で、以下のコマンドを入力。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;03-動作確認:a3ec11490e4688501750670051fa9d02&#34;&gt;03. 動作確認&lt;/h4&gt;

&lt;p&gt;画面内の「登録する」から、ユーザーを登録を行う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://(SERVER_IP):8080/
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a3ec11490e4688501750670051fa9d02:1&#34;&gt;参考： &lt;a href=&#34;http://blog.namiking.net/post/2015/09/install-docker-compose/&#34;&gt;docker-composeのインストールとバージョン差異エラー回避方法&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a3ec11490e4688501750670051fa9d02:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Restyaboard on Dockerで多機能かんばん式プロジェクト管理</title>
      <link>http://blog.namiking.net/post/2015/09/docker-restyaboard/</link>
      <pubDate>Tue, 01 Sep 2015 08:30:23 +0900</pubDate>
      
      <guid>http://blog.namiking.net/post/2015/09/docker-restyaboard/</guid>
      <description>

&lt;p&gt;&lt;code&gt;Restyaboard&lt;/code&gt;は&lt;code&gt;Trello&lt;/code&gt;クローンの一つですが、UIは前衛的で多機能。&lt;br /&gt;
Trelloだと、有料ユーザーしかできないことが、普通にできたりする。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.namiking.net/images/post/2015/09/docker-restyaboard/restyaboard01.jpg&#34; alt=&#34;Restyaboard ScreenShot&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Restyaboard&lt;br /&gt;
&lt;a href=&#34;http://restya.com/board/&#34;&gt;http://restya.com/board/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;dockerを利用した導入手順:e066c3646c5551a0ffd1b68896a78fd2&#34;&gt;Dockerを利用した導入手順&lt;/h3&gt;

&lt;p&gt;公式ページに必要なミドルウェアは書いてあるが、
導入手順が書かれていないっぽい。
ちみちみデバッグしながら、構築した手順を&lt;code&gt;Dockerfile&lt;/code&gt;にまとめておいた。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GitHub: namikingsoft/docker-restyaboard&lt;br /&gt;
&lt;a href=&#34;https://github.com/namikingsoft/docker-restyaboard&#34;&gt;https://github.com/namikingsoft/docker-restyaboard&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;00-事前準備:e066c3646c5551a0ffd1b68896a78fd2&#34;&gt;00. 事前準備&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt;と&lt;code&gt;docker-compose&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e066c3646c5551a0ffd1b68896a78fd2:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e066c3646c5551a0ffd1b68896a78fd2:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;をインストールしておく。&lt;/p&gt;

&lt;h4 id=&#34;01-dockerイメージビルドとコンテナ起動:e066c3646c5551a0ffd1b68896a78fd2&#34;&gt;01. Dockerイメージビルドとコンテナ起動&lt;/h4&gt;

&lt;p&gt;以下のコマンドで、Docker環境を構築できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/namikingsoft/docker-restyaboard.git
cd docker-restyaboard

docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;docker-compose up -d&lt;/code&gt;でイメージのビルドとコンテナ起動を全て自動でやってくれる。
イメージビルドにそこそこ時間が掛かるので注意。&lt;/p&gt;

&lt;h4 id=&#34;02-動作確認:e066c3646c5551a0ffd1b68896a78fd2&#34;&gt;02. 動作確認&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;http://(ServerIP):1234

管理ユーザー
Username: admin
Password: restya

一般ユーザー
Username: user
Password: restya
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:e066c3646c5551a0ffd1b68896a78fd2:1&#34;&gt;参考： &lt;a href=&#34;http://blog.namiking.net/post/2015/09/install-docker-compose/&#34;&gt;docker-composeのインストールとバージョン差異エラー回避方法&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e066c3646c5551a0ffd1b68896a78fd2:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>